dotnet -h para help
dotnet watch run 
dotnet run ->rodar a aplicacao
ctrl + D = Selecionar tudo igual
shit+ctrl+alt = seleção em bloco
ctrl+shit+p = tolowercase entre outros
extensões:
    1.@installed -> instalado
    2.C#;
    3. C# Extensions;
    4. Brackt Pair Colorizer;
    5. Material Icon Theme;
    6. Path Intellisense;
    7. Nuget Package Manager;
    8. Angular Files;
    9. Angular Language Service;
    10.angular2-switcher;
    11.Auto Rename Tag;
    12.Debugger for Chrome;
    13.Live Server;
    14.npm;
    15.Prettier - Code formatter;
    16.TsLint

Criar projeto console
    1. dotnet new console -n GameTop
    2. dotnet run
Criar projeto web
    1. dotnet new web -n nome_projeto.Web
    2. dotnet new mvc -n nome_projeto.MVC //mvc
    2. dotnet new webapi -n nome_projeto.API //WebAPI
Nuget   
    1. ctrl+shit+p;
    2. Escolher nuget;
    3. executar dotnet build;
EntityFramework
    1. dotnet ef; 
    2. dotnet ef migrations -h; //ver comandos
    3. dotnet ef migrations add init;
    4. dotnet ef database update
Angular
    1. npm install -g @angular/cli
    2. cli.angular.io
    3. ng new ProAgil-App
    4. ng serve -o
    5. generate component
bootstrap
    1. npm i --save bootstrap @fortawesome/fontawesome-free
    2. referenciar no angular.json para isso importar no styles.css
Criar novas camadas
    1.dotnet new classlib -n nome.Domain
    2.dotnet new classlib -n nome.Repository
    3.dotnet new sln -n nome_solucao  
    4.deletar class criado as bibliotecas  
    4.1. rm -R local do arquivo
    5.dotnet add ProAgil.Repository/ProAgil.Repository.csproj reference ProAgil.Domain/ProAgil.Domain.csproj  //refenciar projeto
    5.1.dotnet add ProAgil.API/ProAgil.API.csproj reference ProAgil.Domain/ProAgil.Domain.csproj  //refenciar projeto
    5.2.dotnet add ProAgil.API/ProAgil.API.csproj reference ProAgil.Repository/ProAgil.Repository.csproj  //refenciar projeto
    5.3.dotnet sln ProAgil.sln add ProAgil.API/ProAgil.API.csproj ProAgil.Repository/ProAgil.Repository.csproj ProAgil.Domain/ProAgil.Domain.csproj  //adicionar na solução
    5.4. dotnet build na raiz
Entidades
   1. ctrl+shift+p -> nuget
    1.1 Microsoft.EntityFrameworkCore.Sqlite 
   2.dotnet ef no Repository
   3.dotnet ef --startup-project ../Caminho_API migrations add init //necessário para referenciar um projeto
   4.dotnet ef --startup-project ../Caminho_API database update //dentro de Repository
Criar interfaces
    1.
Criar helper dentro do angular
    1.Botão direito generate pipe
    2.criar diretorio util
    3.generate class
    4. importar os pipes no app-module
Componente para angular
    1.ngx-bootstrap
    2. instalar no angular
    3. importar no app-module
Reactive forms
Não esquecer de colocar dentro do styles.css os arquivos como date picker
